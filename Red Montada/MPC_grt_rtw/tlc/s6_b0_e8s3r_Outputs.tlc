%implements s6_b0_e8s3r_Outputs "C"

%function Outputs(block, system) Output
%<SLibCGIRAccessLocalVar(52, 0)> %% rtb_donotdeletethisgain
%<SLibCGIRAccessLocalVar(10, 0)> %% rtb_Sum
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
real_T f[3];
real_T zopt[3];
int16_T iAnew[6];
static const real_T b_Linv[9] = { 0.57639041770423516, -4.1695238138041854E-17, 0.0, 0.0, 0.57639041770423483, 0.0, 0.0, 0.0, 0.003162277660168379 };
static const real_T b_Hinv[9] = { 0.33222591362126269, -2.4032735726663487E-17, 0.0, -2.4032735726663487E-17, 0.3322259136212623, 0.0, 0.0, 0.0, 9.9999999999999974E-6 };
static const real_T b_Ac[18] = { -1.0, -0.0, 1.0, 0.0, 1.0, 0.0, -0.0, -1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
static const real_T a[12] = { 0.46587257075478761, 8.7127067857630418E+35, -3.4467779094997527E-17, 5.0928801789785886E+36, 0.0682548584904246, 8.275175635382157E-17, -3.4467779094997472E-17, 2.2462145055356116E+37, 0.46587257075478794, -3.50501040122898E+37, 8.2751756353821508E-17, 0.068254858490424369 };
static const int8_T b_a[12] = { 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1 };
static const int8_T b_Mlim[6] = { 20, 20, 20, 20, 100, 100 };
static const int8_T b_Mu1[12] = { -1, 0, 1, 0, 0, 0, 0, -1, 0, 1, 0, 0 };
static const real_T b_Kx[12] = { 2.1417677256499215E-108, -4.5498998166004108E-110, -7.9400518744825327E-108, 1.6867580986889327E-109, 2.9999999999999991, 9.3267157516312686E-17, -7.9400518744825327E-108, 1.6867580986889336E-109, 2.9435696044183633E-107, -6.2532209459032488E-109, 1.2447183144083114E-16, 3.0000000000000009 };
static const real_T b_Kr[12] = { -0.99999999999999967, -3.1089052505437564E-17, -0.99999999999999967, -3.1089052505437564E-17, -0.99999999999999967, -3.1089052505437564E-17, -4.149061048027705E-17, -1.0000000000000002, -4.149061048027705E-17, -1.0000000000000002, -4.149061048027705E-17, -1.0000000000000002 };
static const real_T b_Ku1[4] = { 2.9999999999999982, 2.177389889571438E-16, 2.177389889571438E-16, 3.0000000000000013 };
static const real_T c_a[36] = { 2.1417677256499227E-108, 1.8613226522456234E-106, -7.9400518744825312E-108, -6.9003740400910944E-106, 0.0, 0.0, -4.5498998166004132E-110, 1.1393600860927208E-108, 1.6867580986889332E-109, -4.2238838875704367E-108, 0.0, 0.0, -7.9400518744825372E-108, -6.9003740400910867E-106, 2.9435696044183627E-107, 2.5581358415058746E-105, 0.0, 0.0, 1.6867580986889334E-109, -4.223883887570442E-108, -6.2532209459032479E-109, 1.5658960949616109E-107, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };
static const real_T d_a[12] = { 0.99999999999999967, 128.79999999999998, 3.1089052505437564E-17, 28.800000000000011, 0.0, 0.0, 4.149061048027705E-17, 28.79999999999999, 1.0000000000000002, 29.800000000000011, 0.0, 0.0 };
static const real_T e_a[12] = { 8.1940374574781137E-73, -2.0519043493961766E-71, -3.03772821369256E-72, 7.6069065662748581E-71, 0.0682548584904246, 8.275175635382157E-17, -6.9341097769400964E-72, 1.7364004111927673E-70, 2.5706424965178555E-71, -6.4372570258801758E-70, 8.2751756353821508E-17, 0.068254858490424369 };
real_T rtb_last_x[6];
real_T rtb_Product[2];
real_T rtb_DigitalClock_d;
real_T rtb_xk1[6];
boolean_T rtb_iAout[6];
real_T rtb_xest[6];
int32_T i;
real_T b_Mlim_0[6];
int32_T i_0;
real_T rtb_Product1_idx_0;
real_T rtb_Product1_idx_1;
real_T rtb_last_mv_idx_0;
real_T rtb_last_mv_idx_1;
real_T rtb_Switch_idx_0;
real_T rtb_Switch_idx_1;
real_T rtb_u_idx_0;
real_T rtb_u_idx_1;
real_T rtb_Switch_a_idx_0;
real_T rtb_Switch_a_idx_1;
%closefile localVarDecl
%assign tlcOutputsFcnOfS6B0 = OpaqueTLCBlockFcn("Outputs", 6, 0, 0, 13)
%assign tlcOutputsFcnOfS6B1 = OpaqueTLCBlockFcn("Outputs", 6, 1, 0, 13)
%assign tlcOutputsFcnOfS6B2 = OpaqueTLCBlockFcn("Outputs", 6, 2, 0, 13)
%assign tlcOutputsFcnOfS6B9 = OpaqueTLCBlockFcn("Outputs", 6, 9, 0, 13)
%assign tlcOutputsFcnOfS6B10 = OpaqueTLCBlockFcn("Outputs", 6, 10, 0, 13)
%assign tlcOutputsFcnOfS5B0 = OpaqueTLCBlockFcn("Outputs", 5, 0, 0, 13)
%assign tlcUpdateFcnOfS5B0 = OpaqueTLCBlockFcn("Update", 5, 0, 0, 13)
%assign tlcOutputsFcnOfS3B0 = OpaqueTLCBlockFcn("Outputs", 3, 0, 0, 13)
%assign tlcOutputsFcnOfS3B3 = OpaqueTLCBlockFcn("Outputs", 3, 3, 0, 13)
%assign tlcUpdateFcnOfS3B0 = OpaqueTLCBlockFcn("Update", 3, 0, 0, 13)
%assign tlcUpdateFcnOfS3B3 = OpaqueTLCBlockFcn("Update", 3, 3, 0, 13)
%assign tlcOutputsFcnOfS6B28 = OpaqueTLCBlockFcn("Outputs", 6, 28, 0, 13)
%assign tlcOutputsFcnOfS6B29 = OpaqueTLCBlockFcn("Outputs", 6, 29, 0, 13)
%assign tlcOutputsFcnOfS6B30 = OpaqueTLCBlockFcn("Outputs", 6, 30, 0, 13)
%assign tlcOutputsFcnOfS6B31 = OpaqueTLCBlockFcn("Outputs", 6, 31, 0, 13)
%assign tlcOutputsFcnOfS6B32 = OpaqueTLCBlockFcn("Outputs", 6, 32, 0, 13)
%assign tlcOutputsFcnOfS6B33 = OpaqueTLCBlockFcn("Outputs", 6, 33, 0, 13)
%assign tlcOutputsFcnOfS6B35 = OpaqueTLCBlockFcn("Outputs", 6, 35, 0, 13)
%assign tlcOutputsFcnOfS6B36 = OpaqueTLCBlockFcn("Outputs", 6, 36, 0, 13)
%assign tlcOutputsFcnOfS6B37 = OpaqueTLCBlockFcn("Outputs", 6, 37, 0, 13)
%assign tlcOutputsFcnOfS6B41 = OpaqueTLCBlockFcn("Outputs", 6, 41, 0, 13)
%assign tlcUpdateFcnOfS6B0 = OpaqueTLCBlockFcn("Update", 6, 0, 0, 13)
%assign tlcUpdateFcnOfS6B1 = OpaqueTLCBlockFcn("Update", 6, 1, 0, 13)
%assign tlcUpdateFcnOfS6B2 = OpaqueTLCBlockFcn("Update", 6, 2, 0, 13)
%assign tlcUpdateFcnOfS6B31 = OpaqueTLCBlockFcn("Update", 6, 31, 0, 13)
%assign tlcUpdateFcnOfS6B32 = OpaqueTLCBlockFcn("Update", 6, 32, 0, 13)
if (%<(SLibCGIRIsSampleHit(1, 6))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS6B0)
    /* M-S-Function: '<Root>/UDP Receive Fuente Diesel' */
%<tlcOutputsFcnOfS6B0>\
%endif
}
%if !WHITE_SPACE(tlcOutputsFcnOfS6B1)
/* M-S-Function: '<Root>/UDP Receive Fuente PV' */
%<tlcOutputsFcnOfS6B1>\
%endif
if (%<(SLibCGIRIsSampleHit(1, 6))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS6B2)
    /* S-Function (sfun_spssw_discc): '<S41>/State-Space' */
%<tlcOutputsFcnOfS6B2>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS6B9)
    /* Scope: '<Root>/Corriente Inversor Diesel' */
%<tlcOutputsFcnOfS6B9>\
%endif
}
%if !WHITE_SPACE(tlcOutputsFcnOfS6B10)
/* Scope: '<Root>/Corriente Inversor Fotovoltaico' */
%<tlcOutputsFcnOfS6B10>\
%endif
if (%<(SLibCGIRIsSampleHit(2, 6))>) {
    /* Memory: '<S12>/last_x' */
    for (i = 0; i < 6; i++) {
        rtb_last_x[i] = MPC_DW.last_x_PreviousInput[i];
    }
    /* End of Memory: '<S12>/last_x' */

    /* UnitDelay: '<S12>/last_mv' */
    rtb_last_mv_idx_0 = MPC_DW.last_mv_DSTATE[0];
    rtb_last_mv_idx_1 = MPC_DW.last_mv_DSTATE[1];
}
if (%<(SLibCGIRIsSampleHit(1, 6))>) {
    /* Outputs for Enabled SubSystem: '<S7>/TrueRMS ' incorporates:
 *  EnablePort: '<S29>/Enable'
 */
    /* DataTypeConversion: '<S7>/Data Type Conversion' incorporates:
 *  Constant: '<S38>/K1'
 *  Constant: '<S7>/Constant'
 */
    if (MPC_P.RMS2_TrueRMS != 0.0) {
        if (!MPC_DW.TrueRMS_MODE) {
            /* Enable for DiscreteIntegrator: '<S38>/Integ4' */
            MPC_DW.Integ4_SYSTEM_ENABLE = 1U;
            MPC_DW.TrueRMS_MODE = true;
        }
        /* Product: '<S29>/Product' */
        rtb_Product[0] = MPC_B.UDPReceiveFuenteDiesel_o1 * MPC_B.UDPReceiveFuenteDiesel_o1;
        rtb_Product[1] = MPC_B.UDPReceiveFuentePV_o1 * MPC_B.UDPReceiveFuentePV_o1;
        /* DiscreteIntegrator: '<S38>/Integ4' */
        if (MPC_DW.Integ4_SYSTEM_ENABLE != 0) {
            MPC_B.Integ4[0] = MPC_DW.Integ4_DSTATE[0];
            MPC_B.Integ4[1] = MPC_DW.Integ4_DSTATE[1];
        } else {
            MPC_B.Integ4[0] = MPC_P.Integ4_gainval_a * rtb_Product[0] + MPC_DW.Integ4_DSTATE[0];
            MPC_B.Integ4[1] = MPC_P.Integ4_gainval_a * rtb_Product[1] + MPC_DW.Integ4_DSTATE[1];
        }
        /* End of DiscreteIntegrator: '<S38>/Integ4' */
        MPC_B.K1 = MPC_P.K1_Value_o;
%if !WHITE_SPACE(tlcOutputsFcnOfS5B0)
        /* S-Function (sfun_discreteVariableDelay): '<S39>/S-Function' incorporates:
 *  Constant: '<S38>/K1'
 */
%<tlcOutputsFcnOfS5B0>\
%endif
        /* Switch: '<S38>/Switch' incorporates:
 *  Constant: '<S38>/K2'
 *  DigitalClock: '<S38>/Digital  Clock'
 *  Gain: '<S38>/Gain'
 *  Gain: '<S38>/Gain1'
 *  Product: '<S38>/Product'
 *  RelationalOperator: '<S38>/Relational Operator'
 *  Sum: '<S38>/Sum1'
 *  Sum: '<S38>/Sum5'
 *  Sum: '<S38>/Sum7'
 *  UnitDelay: '<S38>/Unit Delay'
 *  UnitDelay: '<S38>/Unit Delay1'
 */
        if (%<(SLibCG_SE(LibGetTaskTime(1)))> >= MPC_B.K1) {
            rtb_Switch_idx_0 = (MPC_B.Integ4[0] - MPC_B.SFunction[0]) * MPC_P.K2_Value_b + (MPC_P.Gain1_Gain_h4 * rtb_Product[0] - MPC_P.Gain_Gain_e * MPC_DW.UnitDelay_DSTATE_l[0]);
            rtb_Switch_idx_1 = (MPC_B.Integ4[1] - MPC_B.SFunction[1]) * MPC_P.K2_Value_b + (MPC_P.Gain1_Gain_h4 * rtb_Product[1] - MPC_P.Gain_Gain_e * MPC_DW.UnitDelay_DSTATE_l[1]);
        } else {
            rtb_Switch_idx_0 = MPC_DW.UnitDelay1_DSTATE[0];
            rtb_Switch_idx_1 = MPC_DW.UnitDelay1_DSTATE[1];
        }
        /* End of Switch: '<S38>/Switch' */

        /* Update for DiscreteIntegrator: '<S38>/Integ4' */
        MPC_DW.Integ4_SYSTEM_ENABLE = 0U;
        /* Saturate: '<S29>/Saturation to avoid negative sqrt' */
        if (rtb_Switch_idx_0 > MPC_P.Saturationtoavoidnegativesqrt_U) {
            rtb_DigitalClock_d = MPC_P.Saturationtoavoidnegativesqrt_U;
        } else if (rtb_Switch_idx_0 < MPC_P.Saturationtoavoidnegativesqrt_L) {
            rtb_DigitalClock_d = MPC_P.Saturationtoavoidnegativesqrt_L;
        } else {
            rtb_DigitalClock_d = rtb_Switch_idx_0;
        }
        /* Sqrt: '<S29>/Sqrt' */
        MPC_B.Sqrt[0] = sqrt(rtb_DigitalClock_d);
        /* Update for DiscreteIntegrator: '<S38>/Integ4' */
        MPC_DW.Integ4_DSTATE[0] = MPC_P.Integ4_gainval_a * rtb_Product[0] + MPC_B.Integ4[0];
        /* Saturate: '<S29>/Saturation to avoid negative sqrt' */
        if (rtb_Switch_idx_1 > MPC_P.Saturationtoavoidnegativesqrt_U) {
            rtb_DigitalClock_d = MPC_P.Saturationtoavoidnegativesqrt_U;
        } else if (rtb_Switch_idx_1 < MPC_P.Saturationtoavoidnegativesqrt_L) {
            rtb_DigitalClock_d = MPC_P.Saturationtoavoidnegativesqrt_L;
        } else {
            rtb_DigitalClock_d = rtb_Switch_idx_1;
        }
        /* Sqrt: '<S29>/Sqrt' */
        MPC_B.Sqrt[1] = sqrt(rtb_DigitalClock_d);
        /* Update for DiscreteIntegrator: '<S38>/Integ4' */
        MPC_DW.Integ4_DSTATE[1] = MPC_P.Integ4_gainval_a * rtb_Product[1] + MPC_B.Integ4[1];
%if !WHITE_SPACE(tlcUpdateFcnOfS5B0)
        /* Update for S-Function (sfun_discreteVariableDelay): '<S39>/S-Function' */
%<tlcUpdateFcnOfS5B0>\
%endif
        /* Update for UnitDelay: '<S38>/Unit Delay' */
        MPC_DW.UnitDelay_DSTATE_l[0] = rtb_Product[0];
        /* Update for UnitDelay: '<S38>/Unit Delay1' */
        MPC_DW.UnitDelay1_DSTATE[0] = rtb_Switch_idx_0;
        /* Update for UnitDelay: '<S38>/Unit Delay' */
        MPC_DW.UnitDelay_DSTATE_l[1] = rtb_Product[1];
        /* Update for UnitDelay: '<S38>/Unit Delay1' */
        MPC_DW.UnitDelay1_DSTATE[1] = rtb_Switch_idx_1;
    } else {
        if (MPC_DW.TrueRMS_MODE) {
            /* Disable for DiscreteIntegrator: '<S38>/Integ4' */
            MPC_DW.Integ4_DSTATE[0] = MPC_B.Integ4[0];
            MPC_DW.Integ4_DSTATE[1] = MPC_B.Integ4[1];
            MPC_DW.TrueRMS_MODE = false;
        }
    }
    /* End of Outputs for SubSystem: '<S7>/TrueRMS ' */

    /* Outputs for Enabled SubSystem: '<S7>/RMS ' incorporates:
 *  EnablePort: '<S28>/Enable'
 */
    /* Logic: '<S7>/Logical Operator' incorporates:
 *  Constant: '<S33>/K1'
 *  Constant: '<S35>/K1'
 *  Constant: '<S7>/Constant'
 *  DataTypeConversion: '<S7>/Data Type Conversion'
 */
    if (!(MPC_P.RMS2_TrueRMS != 0.0)) {
        if (!MPC_DW.RMS_MODE) {
            /* Enable for Sin: '<S30>/sin(wt)' */
            MPC_DW.systemEnable = 1;
            /* Enable for DiscreteIntegrator: '<S35>/Integ4' */
            MPC_DW.Integ4_SYSTEM_ENABLE_h = 1U;
            /* Enable for Sin: '<S30>/cos(wt)' */
            MPC_DW.systemEnable_m = 1;
            /* Enable for DiscreteIntegrator: '<S33>/Integ4' */
            MPC_DW.Integ4_SYSTEM_ENABLE_e = 1U;
            MPC_DW.RMS_MODE = true;
        }
        /* Sin: '<S30>/sin(wt)' */
        if (MPC_DW.systemEnable != 0) {
            MPC_DW.lastSin = sin(6.2831853071795862 * MPC_P.Fourier1_Freq * %<(SLibCG_SE(LibGetTaskTime(1)))>);
            MPC_DW.lastCos = cos(6.2831853071795862 * MPC_P.Fourier1_Freq * %<(SLibCG_SE(LibGetTaskTime(1)))>);
            MPC_DW.systemEnable = 0;
        }
        rtb_DigitalClock_d = ((MPC_DW.lastSin * MPC_P.sinwt_PCos + MPC_DW.lastCos * MPC_P.sinwt_PSin) * MPC_P.sinwt_HCos + (MPC_DW.lastCos * MPC_P.sinwt_PCos - MPC_DW.lastSin * MPC_P.sinwt_PSin) * MPC_P.sinwt_Hsin) * MPC_P.sinwt_Amp + MPC_P.sinwt_Bias;
        /* End of Sin: '<S30>/sin(wt)' */

        /* Product: '<S30>/Product' */
        rtb_Product[0] = MPC_B.UDPReceiveFuenteDiesel_o1 * rtb_DigitalClock_d;
        rtb_Product[1] = MPC_B.UDPReceiveFuentePV_o1 * rtb_DigitalClock_d;
        /* DiscreteIntegrator: '<S35>/Integ4' */
        if (MPC_DW.Integ4_SYSTEM_ENABLE_h != 0) {
            MPC_B.Integ4_e[0] = MPC_DW.Integ4_DSTATE_c[0];
            MPC_B.Integ4_e[1] = MPC_DW.Integ4_DSTATE_c[1];
        } else {
            MPC_B.Integ4_e[0] = MPC_P.Integ4_gainval * rtb_Product[0] + MPC_DW.Integ4_DSTATE_c[0];
            MPC_B.Integ4_e[1] = MPC_P.Integ4_gainval * rtb_Product[1] + MPC_DW.Integ4_DSTATE_c[1];
        }
        /* End of DiscreteIntegrator: '<S35>/Integ4' */
        MPC_B.K1_j = MPC_P.K1_Value;
%if !WHITE_SPACE(tlcOutputsFcnOfS3B0)
        /* S-Function (sfun_discreteVariableDelay): '<S36>/S-Function' incorporates:
 *  Constant: '<S35>/K1'
 */
%<tlcOutputsFcnOfS3B0>\
%endif
        /* Switch: '<S35>/Switch' incorporates:
 *  Constant: '<S35>/K2'
 *  DigitalClock: '<S35>/Digital  Clock'
 *  Gain: '<S35>/Gain'
 *  Gain: '<S35>/Gain1'
 *  Product: '<S35>/Product'
 *  RelationalOperator: '<S35>/Relational Operator'
 *  Sum: '<S35>/Sum1'
 *  Sum: '<S35>/Sum5'
 *  Sum: '<S35>/Sum7'
 *  UnitDelay: '<S35>/Unit Delay'
 *  UnitDelay: '<S35>/Unit Delay1'
 */
        if (%<(SLibCG_SE(LibGetTaskTime(1)))> >= MPC_B.K1_j) {
            rtb_Switch_idx_0 = (MPC_B.Integ4_e[0] - MPC_B.SFunction_n[0]) * MPC_P.K2_Value + (MPC_P.Gain1_Gain_h * rtb_Product[0] - MPC_P.Gain_Gain_f * MPC_DW.UnitDelay_DSTATE_g[0]);
            rtb_Switch_idx_1 = (MPC_B.Integ4_e[1] - MPC_B.SFunction_n[1]) * MPC_P.K2_Value + (MPC_P.Gain1_Gain_h * rtb_Product[1] - MPC_P.Gain_Gain_f * MPC_DW.UnitDelay_DSTATE_g[1]);
        } else {
            rtb_Switch_idx_0 = MPC_DW.UnitDelay1_DSTATE_i[0];
            rtb_Switch_idx_1 = MPC_DW.UnitDelay1_DSTATE_i[1];
        }
        /* End of Switch: '<S35>/Switch' */

        /* Sin: '<S30>/cos(wt)' */
        if (MPC_DW.systemEnable_m != 0) {
            MPC_DW.lastSin_b = sin(6.2831853071795862 * MPC_P.Fourier1_Freq * %<(SLibCG_SE(LibGetTaskTime(1)))>);
            MPC_DW.lastCos_d = cos(6.2831853071795862 * MPC_P.Fourier1_Freq * %<(SLibCG_SE(LibGetTaskTime(1)))>);
            MPC_DW.systemEnable_m = 0;
        }
        rtb_DigitalClock_d = ((MPC_DW.lastSin_b * MPC_P.coswt_PCos + MPC_DW.lastCos_d * MPC_P.coswt_PSin) * MPC_P.coswt_HCos + (MPC_DW.lastCos_d * MPC_P.coswt_PCos - MPC_DW.lastSin_b * MPC_P.coswt_PSin) * MPC_P.coswt_Hsin) * MPC_P.coswt_Amp + MPC_P.coswt_Bias;
        /* End of Sin: '<S30>/cos(wt)' */

        /* Product: '<S30>/Product1' */
        rtb_Product1_idx_0 = MPC_B.UDPReceiveFuenteDiesel_o1 * rtb_DigitalClock_d;
        rtb_Product1_idx_1 = MPC_B.UDPReceiveFuentePV_o1 * rtb_DigitalClock_d;
        /* DiscreteIntegrator: '<S33>/Integ4' */
        if (MPC_DW.Integ4_SYSTEM_ENABLE_e != 0) {
            MPC_B.Integ4_g[0] = MPC_DW.Integ4_DSTATE_cc[0];
            MPC_B.Integ4_g[1] = MPC_DW.Integ4_DSTATE_cc[1];
        } else {
            MPC_B.Integ4_g[0] = MPC_P.Integ4_gainval_f * rtb_Product1_idx_0 + MPC_DW.Integ4_DSTATE_cc[0];
            MPC_B.Integ4_g[1] = MPC_P.Integ4_gainval_f * rtb_Product1_idx_1 + MPC_DW.Integ4_DSTATE_cc[1];
        }
        /* End of DiscreteIntegrator: '<S33>/Integ4' */
        MPC_B.K1_l = MPC_P.K1_Value_d;
%if !WHITE_SPACE(tlcOutputsFcnOfS3B3)
        /* S-Function (sfun_discreteVariableDelay): '<S34>/S-Function' incorporates:
 *  Constant: '<S33>/K1'
 */
%<tlcOutputsFcnOfS3B3>\
%endif
        /* Switch: '<S33>/Switch' incorporates:
 *  Constant: '<S33>/K2'
 *  DigitalClock: '<S33>/Digital  Clock'
 *  Gain: '<S33>/Gain'
 *  Gain: '<S33>/Gain1'
 *  Product: '<S33>/Product'
 *  RelationalOperator: '<S33>/Relational Operator'
 *  Sum: '<S33>/Sum1'
 *  Sum: '<S33>/Sum5'
 *  Sum: '<S33>/Sum7'
 *  UnitDelay: '<S33>/Unit Delay'
 *  UnitDelay: '<S33>/Unit Delay1'
 */
        if (%<(SLibCG_SE(LibGetTaskTime(1)))> >= MPC_B.K1_l) {
            rtb_Switch_a_idx_0 = (MPC_B.Integ4_g[0] - MPC_B.SFunction_m[0]) * MPC_P.K2_Value_d + (MPC_P.Gain1_Gain * rtb_Product1_idx_0 - MPC_P.Gain_Gain * MPC_DW.UnitDelay_DSTATE_f[0]);
            rtb_Switch_a_idx_1 = (MPC_B.Integ4_g[1] - MPC_B.SFunction_m[1]) * MPC_P.K2_Value_d + (MPC_P.Gain1_Gain * rtb_Product1_idx_1 - MPC_P.Gain_Gain * MPC_DW.UnitDelay_DSTATE_f[1]);
        } else {
            rtb_Switch_a_idx_0 = MPC_DW.UnitDelay1_DSTATE_g[0];
            rtb_Switch_a_idx_1 = MPC_DW.UnitDelay1_DSTATE_g[1];
        }
        /* End of Switch: '<S33>/Switch' */

        /* Update for Sin: '<S30>/sin(wt)' */
        rtb_DigitalClock_d = MPC_DW.lastSin;
        MPC_DW.lastSin = MPC_DW.lastSin * MPC_P.sinwt_HCos + MPC_DW.lastCos * MPC_P.sinwt_Hsin;
        MPC_DW.lastCos = MPC_DW.lastCos * MPC_P.sinwt_HCos - rtb_DigitalClock_d * MPC_P.sinwt_Hsin;
        /* Update for DiscreteIntegrator: '<S35>/Integ4' */
        MPC_DW.Integ4_SYSTEM_ENABLE_h = 0U;
        /* Gain: '<S28>/Gain' incorporates:
 *  ComplexToMagnitudeAngle: '<S30>/Complex to Magnitude-Angle'
 *  RealImagToComplex: '<S30>/Real-Imag to Complex'
 */
        MPC_B.Gain[0] = MPC_P.Gain_Gain_i * %<(SLibCGCallSubFcn("rt_hypotd_snf", ["rtb_Switch_idx_0", "rtb_Switch_a_idx_0"], 0, 13, 1))>;
        /* Update for DiscreteIntegrator: '<S35>/Integ4' */
        MPC_DW.Integ4_DSTATE_c[0] = MPC_P.Integ4_gainval * rtb_Product[0] + MPC_B.Integ4_e[0];
        /* Gain: '<S28>/Gain' incorporates:
 *  ComplexToMagnitudeAngle: '<S30>/Complex to Magnitude-Angle'
 *  RealImagToComplex: '<S30>/Real-Imag to Complex'
 */
        MPC_B.Gain[1] = MPC_P.Gain_Gain_i * %<(SLibCGCallSubFcn("rt_hypotd_snf", ["rtb_Switch_idx_1", "rtb_Switch_a_idx_1"], 0, 13, 2))>;
        /* Update for DiscreteIntegrator: '<S35>/Integ4' */
        MPC_DW.Integ4_DSTATE_c[1] = MPC_P.Integ4_gainval * rtb_Product[1] + MPC_B.Integ4_e[1];
%if !WHITE_SPACE(tlcUpdateFcnOfS3B0)
        /* Update for S-Function (sfun_discreteVariableDelay): '<S36>/S-Function' */
%<tlcUpdateFcnOfS3B0>\
%endif
        /* Update for Sin: '<S30>/cos(wt)' */
        rtb_DigitalClock_d = MPC_DW.lastSin_b;
        MPC_DW.lastSin_b = MPC_DW.lastSin_b * MPC_P.coswt_HCos + MPC_DW.lastCos_d * MPC_P.coswt_Hsin;
        MPC_DW.lastCos_d = MPC_DW.lastCos_d * MPC_P.coswt_HCos - rtb_DigitalClock_d * MPC_P.coswt_Hsin;
        /* Update for DiscreteIntegrator: '<S33>/Integ4' */
        MPC_DW.Integ4_SYSTEM_ENABLE_e = 0U;
        /* Update for UnitDelay: '<S35>/Unit Delay' */
        MPC_DW.UnitDelay_DSTATE_g[0] = rtb_Product[0];
        /* Update for UnitDelay: '<S35>/Unit Delay1' */
        MPC_DW.UnitDelay1_DSTATE_i[0] = rtb_Switch_idx_0;
        /* Update for DiscreteIntegrator: '<S33>/Integ4' */
        MPC_DW.Integ4_DSTATE_cc[0] = MPC_P.Integ4_gainval_f * rtb_Product1_idx_0 + MPC_B.Integ4_g[0];
        /* Update for UnitDelay: '<S35>/Unit Delay' */
        MPC_DW.UnitDelay_DSTATE_g[1] = rtb_Product[1];
        /* Update for UnitDelay: '<S35>/Unit Delay1' */
        MPC_DW.UnitDelay1_DSTATE_i[1] = rtb_Switch_idx_1;
        /* Update for DiscreteIntegrator: '<S33>/Integ4' */
        MPC_DW.Integ4_DSTATE_cc[1] = MPC_P.Integ4_gainval_f * rtb_Product1_idx_1 + MPC_B.Integ4_g[1];
%if !WHITE_SPACE(tlcUpdateFcnOfS3B3)
        /* Update for S-Function (sfun_discreteVariableDelay): '<S34>/S-Function' */
%<tlcUpdateFcnOfS3B3>\
%endif
        /* Update for UnitDelay: '<S33>/Unit Delay' */
        MPC_DW.UnitDelay_DSTATE_f[0] = rtb_Product1_idx_0;
        /* Update for UnitDelay: '<S33>/Unit Delay1' */
        MPC_DW.UnitDelay1_DSTATE_g[0] = rtb_Switch_a_idx_0;
        /* Update for UnitDelay: '<S33>/Unit Delay' */
        MPC_DW.UnitDelay_DSTATE_f[1] = rtb_Product1_idx_1;
        /* Update for UnitDelay: '<S33>/Unit Delay1' */
        MPC_DW.UnitDelay1_DSTATE_g[1] = rtb_Switch_a_idx_1;
    } else {
        if (MPC_DW.RMS_MODE) {
            /* Disable for DiscreteIntegrator: '<S35>/Integ4' */
            MPC_DW.Integ4_DSTATE_c[0] = MPC_B.Integ4_e[0];
            /* Disable for DiscreteIntegrator: '<S33>/Integ4' */
            MPC_DW.Integ4_DSTATE_cc[0] = MPC_B.Integ4_g[0];
            /* Disable for DiscreteIntegrator: '<S35>/Integ4' */
            MPC_DW.Integ4_DSTATE_c[1] = MPC_B.Integ4_e[1];
            /* Disable for DiscreteIntegrator: '<S33>/Integ4' */
            MPC_DW.Integ4_DSTATE_cc[1] = MPC_B.Integ4_g[1];
            MPC_DW.RMS_MODE = false;
        }
    }
    /* End of Logic: '<S7>/Logical Operator' */
    /* End of Outputs for SubSystem: '<S7>/RMS ' */

    /* Switch: '<S7>/Switch' incorporates:
 *  Constant: '<S7>/Constant'
 *  DataTypeConversion: '<S7>/Data Type Conversion'
 */
    if (MPC_P.RMS2_TrueRMS != 0.0) {
        MPC_B.Switch[0] = MPC_B.Sqrt[0];
        MPC_B.Switch[1] = MPC_B.Sqrt[1];
    } else {
        MPC_B.Switch[0] = MPC_B.Gain[0];
        MPC_B.Switch[1] = MPC_B.Gain[1];
    }
    /* End of Switch: '<S7>/Switch' */
}
if (%<(SLibCGIRIsSampleHit(2, 6))>) {
    /* MATLAB Function: '<S12>/optimizer' incorporates:
 *  Constant: '<Root>/Constant'
 *  Memory: '<S12>/Memory'
 */
    /* MATLAB Function 'MPC Controller/MPC/optimizer': '<S27>:1' */
    /* '<S27>:1:139' */
    /* '<S27>:1:128' */
    /* '<S27>:1:126' */
    /* '<S27>:1:125' */
    /* '<S27>:1:81' */
    /* '<S27>:1:79' */
    /* '<S27>:1:77' */
    /* '<S27>:1:74' */
    /* '<S27>:1:67' */
    /* '<S27>:1:52' */
    /*  Parameters */
    /*  Pre-allocate all the MEX block outputs for the simulation mode */
    /*  Get reference and MD signals -- accounting for previewing */
    /*  When doing code generation, use M code directly */
    /* '<S27>:1:52' */
    for (i = 0; i < 6; i++) {
        rtb_xk1[i] = 0.0;
    }
    for (i = 0; i < 3; i++) {
        rtb_xk1[i * (int32_T)MPC_ny] = MPC_P.Constant_Value[0];
        rtb_xk1[1 + i * (int32_T)MPC_ny] = MPC_P.Constant_Value[1];
    }
    /*  External MV override.   */
    /*  NOTE: old_u and ext_mv input signals are dimensionless but include offset */
    /* '<S27>:1:57' */
    /*  Obtain x[k|k] */
    /* '<S27>:1:67' */
    /*  Remove offset */
    /*  Default state estimation.     */
    /*  Scale measured output and remove offset. */
    /* '<S27>:1:74' */
    /*  Correct x(k|k-1) for possible external mv override. */
    /*  NOTE:  Offset was removed from x[k|k-1] at k=0. */
    /* '<S27>:1:77' */
    /*  Measurement upate to x(k|k) */
    /* '<S27>:1:79' */
    /* '<S27>:1:80' */
    for (i_0 = 0; i_0 < 2; i_0++) {
        rtb_Switch_idx_0 = 0.0;
        for (i = 0; i < 6; i++) {
            rtb_Switch_idx_0 += (real_T)b_a[(i << 1) + i_0] * rtb_last_x[i];
        }
        rtb_Product[i_0] = MPC_B.Switch[i_0] - rtb_Switch_idx_0;
    }
    /* '<S27>:1:81' */
    for (i_0 = 0; i_0 < 6; i_0++) {
        rtb_xest[i_0] = (a[i_0 + 6] * rtb_Product[1] + a[i_0] * rtb_Product[0]) + rtb_last_x[i_0];
    }
    /*  Real-time MV target override */
    /*  Note: utargetValue is a vector length p*nu.   */
    /*  no external utarget */
    /*  When doing code generation, use M code directly */
    /* '<S27>:1:123' */
    f[0] = 0.0;
    f[1] = 0.0;
    f[2] = 0.0;
    for (i = 0; i < 2; i++) {
        rtb_Switch_idx_0 = 0.0;
        rtb_Switch_idx_1 = 0.0;
        for (i_0 = 0; i_0 < 6; i_0++) {
            rtb_Switch_idx_0 += b_Kx[6 * i + i_0] * rtb_xest[i_0];
            rtb_Switch_idx_1 += b_Kr[6 * i + i_0] * rtb_xk1[i_0];
        }
        f[i] = (b_Ku1[(i << 1) + 1] * rtb_last_mv_idx_1 + b_Ku1[i << 1] * rtb_last_mv_idx_0) + (rtb_Switch_idx_0 + rtb_Switch_idx_1);
    }
    for (i = 0; i < 6; i++) {
        iAnew[i] = MPC_DW.Memory_PreviousInput[i];
        rtb_Switch_idx_0 = 0.0;
        for (i_0 = 0; i_0 < 6; i_0++) {
            rtb_Switch_idx_0 += 0.0 * rtb_xest[i_0];
        }
        b_Mlim_0[i] = -(((real_T)b_Mlim[i] + rtb_Switch_idx_0) + ((real_T)b_Mu1[i + 6] * rtb_last_mv_idx_1 + (real_T)b_Mu1[i] * rtb_last_mv_idx_0));
    }
    %<(SLibCGCallSubFcn("MPC_qpkwik", ["b_Linv", "b_Hinv", "f", "b_Ac", "b_Mlim_0", "iAnew", "120", "1.0E-6", "zopt", "rtb_xk1", "&rtb_DigitalClock_d"], 0, 13, 0))>;
    if (rtb_DigitalClock_d <= 0.0) {
        zopt[0] = 0.0;
        zopt[1] = 0.0;
    }
    rtb_u_idx_0 = rtb_last_mv_idx_0 + zopt[0];
    rtb_u_idx_1 = rtb_last_mv_idx_1 + zopt[1];
    /* '<S27>:1:123' */
    /*  update x[k+1|k], assuming that above u and v will be applied. */
    /* '<S27>:1:139' */
    /* '<S27>:1:141' */
    /*  Updated state must include offset */
    /* '<S27>:1:147' */
    for (i = 0; i < 6; i++) {
        rtb_iAout[i] = (iAnew[i] != 0);
        rtb_xest[i] = 0.0;
        for (i_0 = 0; i_0 < 6; i_0++) {
            rtb_xest[i] += c_a[6 * i_0 + i] * rtb_last_x[i_0];
        }
        rtb_xk1[i] = (e_a[i + 6] * rtb_Product[1] + e_a[i] * rtb_Product[0]) + (rtb_xest[i] + (d_a[i + 6] * rtb_u_idx_1 + d_a[i] * rtb_u_idx_0));
    }
    /* End of MATLAB Function: '<S12>/optimizer' */

    /* Gain: '<S12>/umin_scale1' */
    MPC_B.umin_scale1[0] = MPC_P.umin_scale1_Gain[0] * rtb_u_idx_0;
    MPC_B.umin_scale1[1] = MPC_P.umin_scale1_Gain[1] * rtb_u_idx_1;
%if !WHITE_SPACE(tlcOutputsFcnOfS6B28)
    /* Scope: '<Root>/Input' */
%<tlcOutputsFcnOfS6B28>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS6B29)
    /* Scope: '<Root>/Input1' */
%<tlcOutputsFcnOfS6B29>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS6B30)
    /* Scope: '<Root>/Input2' */
%<tlcOutputsFcnOfS6B30>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS6B31)
    /* M-S-Function: '<Root>/Ref para Inv Diesel' */
%<tlcOutputsFcnOfS6B31>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS6B32)
    /* M-S-Function: '<Root>/Ref para Inv PV' */
%<tlcOutputsFcnOfS6B32>\
%endif
}
if (%<(SLibCGIRIsSampleHit(1, 6))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS6B33)
    /* Scope: '<Root>/StatusDiesel' */
%<tlcOutputsFcnOfS6B33>\
%endif
}
/* Sum: '<S1>/Sum' incorporates:
 *  Constant: '<S1>/Constant'
 *  UnitDelay: '<S1>/Unit Delay'
 */
rtb_Sum = MPC_P.Constant_Value_j - MPC_DW.UnitDelay_DSTATE;
%if !WHITE_SPACE(tlcOutputsFcnOfS6B35)
/* Scope: '<Root>/StatusPV' */
%<tlcOutputsFcnOfS6B35>\
%endif
if (%<(SLibCGIRIsSampleHit(1, 6))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS6B36)
    /* Scope: '<Root>/Valores RMS' incorporates:
 *  Constant: '<Root>/Constant'
 */
%<tlcOutputsFcnOfS6B36>\
%endif
    /* Gain: '<S4>/do not delete this gain' */
    rtb_donotdeletethisgain = MPC_P.donotdeletethisgain_Gain * MPC_B.StateSpace[1];
%if !WHITE_SPACE(tlcOutputsFcnOfS6B37)
    /* Scope: '<Root>/Corriente en Carga' */
%<tlcOutputsFcnOfS6B37>\
%endif
    /* Gain: '<S8>/do not delete this gain' */
    rtb_donotdeletethisgain = MPC_P.donotdeletethisgain_Gain_a * MPC_B.StateSpace[0];
%if !WHITE_SPACE(tlcOutputsFcnOfS6B41)
    /* Scope: '<Root>/Tension enCarga' */
%<tlcOutputsFcnOfS6B41>\
%endif
%if !WHITE_SPACE(tlcUpdateFcnOfS6B0)
    /* Update for M-S-Function: '<Root>/UDP Receive Fuente Diesel' */
%<tlcUpdateFcnOfS6B0>\
%endif
}
%if !WHITE_SPACE(tlcUpdateFcnOfS6B1)
/* Update for M-S-Function: '<Root>/UDP Receive Fuente PV' */
%<tlcUpdateFcnOfS6B1>\
%endif
if (%<(SLibCGIRIsSampleHit(1, 6))>) {
%if !WHITE_SPACE(tlcUpdateFcnOfS6B2)
    /* Update for S-Function (sfun_spssw_discc): '<S41>/State-Space' */
%<tlcUpdateFcnOfS6B2>\
%endif
}
if (%<(SLibCGIRIsSampleHit(2, 6))>) {
    /* Update for UnitDelay: '<S12>/last_mv' */
    MPC_DW.last_mv_DSTATE[0] = rtb_u_idx_0;
    MPC_DW.last_mv_DSTATE[1] = rtb_u_idx_1;
    for (i = 0; i < 6; i++) {
        /* Update for Memory: '<S12>/last_x' */
        MPC_DW.last_x_PreviousInput[i] = rtb_xk1[i];
        /* Update for Memory: '<S12>/Memory' */
        MPC_DW.Memory_PreviousInput[i] = rtb_iAout[i];
    }
%if !WHITE_SPACE(tlcUpdateFcnOfS6B31)
    /* Update for M-S-Function: '<Root>/Ref para Inv Diesel' */
%<tlcUpdateFcnOfS6B31>\
%endif
%if !WHITE_SPACE(tlcUpdateFcnOfS6B32)
    /* Update for M-S-Function: '<Root>/Ref para Inv PV' */
%<tlcUpdateFcnOfS6B32>\
%endif
}
/* Update for UnitDelay: '<S1>/Unit Delay' */
MPC_DW.UnitDelay_DSTATE = rtb_Sum;
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 13, fcnProtoType)>
%endfunction
